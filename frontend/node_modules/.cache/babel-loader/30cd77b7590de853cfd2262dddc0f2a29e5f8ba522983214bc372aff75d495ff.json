{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ludovik.roy\\\\Documents\\\\Ludo\\\\projets_react\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action({\n  request,\n  params\n}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get(\"title\"),\n    title: data.get(\"image\"),\n    title: data.get(\"date\"),\n    title: data.get(\"description\")\n  };\n  const response = fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not save event.\"\n    }), {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventData","title","get","response","fetch","method","headers","body","JSON","stringify","ok","Response","message","status","$RefreshReg$"],"sources":["C:/Users/ludovik.roy/Documents/Ludo/projets_react/12-adv-starting-project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\r\n\r\nfunction NewEventPage() {\r\n  return <EventForm />;\r\n}\r\n\r\nexport default NewEventPage;\r\n\r\nexport async function action({ request, params }) {\r\n  const data = await request.formData();\r\n\r\n  const eventData = {\r\n    title: data.get(\"title\"),\r\n    title: data.get(\"image\"),\r\n    title: data.get(\"date\"),\r\n    title: data.get(\"description\"),\r\n  };\r\n\r\n  const response = fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(eventData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Response(JSON.stringify({ message: \"Could not save event.\" }), {\r\n      status: 500,\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,YAAYA,CAAA,EAAG;EACtB,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtB;AAACC,EAAA,GAFQL,YAAY;AAIrB,eAAeA,YAAY;AAE3B,OAAO,eAAeM,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;EAErC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBD,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBD,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACvBD,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,aAAa;EAC/B,CAAC;EAED,MAAMC,QAAQ,GAAGC,KAAK,CAAC,8BAA8B,EAAE;IACrDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,SAAS;EAChC,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACH,IAAI,CAACC,SAAS,CAAC;MAAEG,OAAO,EAAE;IAAwB,CAAC,CAAC,EAAE;MACvEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;AACF;AAAC,IAAAnB,EAAA;AAAAoB,YAAA,CAAApB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}